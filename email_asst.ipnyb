!pip install -q openai==1.61.1

import json, os


from google.colab import drive

file_name = '/content/drive/MyDrive/JHU_GENAI/config.json'
with open(file_name, 'r') as file:
    config = json.load(file)
    os.environ['OPENAI_API_KEY']  = config.get("API_KEY") # Loading the API Key
    os.environ["OPENAI_BASE_URL"] = config.get("OPENAI_API_BASE") # Loading the API Base Url


model_name = "gpt-4o-mini"

from openai import OpenAI

client = OpenAI()


def llm(system_prompt, user_prompt):
  try:
      # Craft the messages to pass to chat.completions.create
      prompt = [
          {'role':'system', 'content': system_prompt},
          {'role': 'user', 'content': user_prompt}
      ]

      response = client.chat.completions.create(
          model=model_name,
          messages=prompt,
          temperature=0
      )

      return response.choices[0].message.content.strip()

  except Exception as e:
      prediction = f'Sorry, I encountered the following error: \n {e}'
      print(prediction)



drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/JHU_GENAI/Alex_emails_march_04.csv'

import pandas as pd

df = pd.read_csv(file_path, index_col="email_id", encoding='latin-1')


from datetime import datetime, timedelta

yesterday_date = pd.to_datetime("3/3/2025").strftime('%m/%d/%Y')

df['date_received'] = pd.to_datetime(df['date_received']).dt.strftime('%m/%d/%Y')

yesterday_emails = df[df['date_received'] == yesterday_date].reset_index(drop=True)
print(f"Filtered Emails Count: {len(yesterday_emails)}")

df.shape

yesterday_emails.info()

# @title Code to add categories to the dataset
categories = ['Urgent & High-Priority Emails',
              'Deadline-Driven Emails',
              'Routine Updates & Check-ins',
              'Non-Urgent Informational Emails',
              'Personal & Social Emails',
              'Spam/Unimportant Emails']


system_prompt = f"""
You are an intelligent assistant that categorizes emails based on their content.

You must classify each email into exactly one of the following categories:

{chr(10).join(f"{i+1}. {cat}" for i, cat in enumerate(categories))}

You must return only the exact category name as output. Do not include any explanation.
"""

user_prompt = """
Email Subject: {subject}

Email Body: {body}

Based on the content, assign this email to exactly one of the following categories:
1. Urgent & High-Priority Emails
2. Deadline-Driven Emails
3. Routine Updates & Check-ins
4. Non-Urgent Informational Emails
5. Personal & Social Emails
6. Spam/Unimportant Emails

Reply with **only** the category name exactly as listed above, no extra explanation.
"""


# @title Categorizing the emails
from tqdm import tqdm  # Import the tqdm library for the progress bar

# Ensure the 'category' column exists in the DataFrame
if 'category' not in yesterday_emails.columns:
  yesterday_emails['category'] = None  # Create the column if it does not exist


for index, row in tqdm(yesterday_emails.iterrows(), total=df.shape[0], desc='Processing emails'):
  
  prompt = f"""{user_prompt}
    Please find the attached email below from yesterday that need to be analyzed:
    ```
    {row.to_string()}
    ```
  """

  category_by_llm = llm(system_prompt, prompt)

  # Append the category generated by the LLM to the 'category' column in the same row
  if category_by_llm in categories:
    yesterday_emails.at[index, 'category'] = category_by_llm
  else:
    yesterday_emails.at[index, 'category'] = ""


# Display the DataFrame which has categories
yesterday_emails.head()




system_prompt = """
You are an AI assistant that analyzes a list of emails categorized by priority and content. 
Your job is to provide a clear, concise executive dashboard summary of the emails received yesterday. 

Count how many emails are in each category.

Provide a final summary highlighting:
- The number of critical emails that require immediate action today.
- The number of emails that can be reviewed or handled later.

Return the summary in a structured, easy-to-read format with bullet points.
Do NOT include the raw data itself in the output.
"""

user_prompt = f"""
Below is the list of emails received yesterday with their assigned categories:
```
{yesterday_emails[['subject', 'category']].to_string(index=False)}
```


Please count how many emails are in each category and write an executive summary dashboard like this:

- Total Emails from Yesterday: <total_count>
- Urgent & High-Priority Emails: <count> (Require Immediate Action Today)
- Deadline-Driven Emails: <count> (Must Be Addressed Today)
- Routine Updates & Check-ins: <count> (Review & Acknowledge)
- Non-Urgent Informational Emails: <count> (Can Be Deferred or Delegated)
- Personal & Social Emails: <count> (Optional Review)
- Spam/Unimportant Emails Filtered Out: <count>

AI Conclusion:
"You have <sum of urgent + deadline> critical emails from yesterday that require action today. Additionally, there are <sum of routine + non-urgent + personal> updates to review at your convenience."
"""

response_1 = llm(system_prompt, user_prompt)        # llm is the model using gpt-4o-mini
response_1

from IPython.display import display, Markdown
display(Markdown(response_1))



